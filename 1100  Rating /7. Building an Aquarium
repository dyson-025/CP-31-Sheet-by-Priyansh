üß† Problem Restatement
link: https://codeforces.com/problemset/problem/1873/E
We have:

n coral columns, with heights a‚ÇÅ, a‚ÇÇ, ‚Ä¶, a‚Çô.

We choose a tank height h.

For each column:

If a·µ¢ < h, we pour (h - a·µ¢) units of water.

If a·µ¢ ‚â• h, we pour 0.

We can use at most x units of water total.

We must find the maximum possible height h such that:

Œ£ max(0, h - a·µ¢) ‚â§ x

üß© Observation

This is a monotonic function:

If h increases, the water needed (Œ£ max(0, h - a·µ¢)) also increases.

That means we can apply binary search on h.

üéØ Goal

Find maximum h such that:

water_needed(h) ‚â§ x

‚öôÔ∏è Steps to Solve

Compute function water_needed(h)
‚Üí For each coral height a·µ¢, add (h - a·µ¢) if h > a·µ¢.

Binary search on h

Low = 1

High = max(a) + x + 1 (worst case: if we poured all water above the tallest coral)

While loop until low <= high

Mid = (low + high) / 2

If water_needed(mid) ‚â§ x ‚Üí valid, move low = mid + 1

Else high = mid - 1

The final answer = high (since when we exit loop, high is the last valid height)

üßÆ Time Complexity
Step	Complexity
Each water check	O(n)
Binary search steps	O(log(max(a) + x)) ‚âà 40
Total	O(n logC) ‚Äî fits in 2s

‚ö° Works easily for n ‚â§ 2√ó10‚Åµ across all test cases.

‚úÖ Clean & Fast Code Template
#include <bits/stdc++.h>
using namespace std;

#define fast_io ios::sync_with_stdio(false); cin.tie(nullptr);
#define ll long long
#define all(x) (x).begin(), (x).end()
#define endl '\n'

bool can(ll h, const vector<ll>& a, ll x) {
    ll water = 0;
    for (auto coral : a) {
        if (coral < h) {
            water += (h - coral);
            if (water > x) return false; // prune early
        }
    }
    return water <= x;
}

void solve() {
    ll n, x;
    cin >> n >> x;
    vector<ll> a(n);
    for (auto &v : a) cin >> v;

    ll low = 1;
    ll high = *max_element(all(a)) + x + 1;
    ll ans = 1;

    while (low <= high) {
        ll mid = (low + high) / 2;
        if (can(mid, a, x)) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    cout << ans << endl;
}

int main() {
    fast_io
    int t;
    cin >> t;
    while (t--) solve();
    return 0;
}

üß© Example Walkthrough

Input

1
7 9
3 1 2 4 6 2 5


Try h = 4

Heights: [3,1,2,4,6,2,5]
Water needed = (1+3+2+0+0+2+0) = 8 ‚â§ 9 ‚úÖ


Try h = 5

Water = (2+4+3+1+0+3+0) = 13 > 9 ‚ùå


So answer = 4 ‚úÖ

üí° Intuition Summary (for your notes)
Concept	Explanation
max(0, h - a·µ¢)	Water needed on coral i
Function type	Monotonic increasing
Binary search goal	Maximize h s.t. total ‚â§ x
Complexity	O(n log C)
Edge case	All tall coral ‚Üí answer = max(a) + something
üìò Example Outputs
Input	Output
7 9 \n 3 1 2 4 6 2 5	4
3 10 \n 1 1 1	4
4 1 \n 1 4 3 4	2
6 1984 \n 2 6 5 9 1 8	335
1 1000000000 \n 1	1000000001
